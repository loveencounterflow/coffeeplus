
'use strict'


class X extends Foo
  constructor: ->
    return undefined
f = ( a, b ) -> a * b


sql"""
select 'helo world';
select count(*) over ( order by y ) from foo order by f( x );
"""

select count(*) over ( order by y ) from foo order by f( x );




class X extends Foo
  constructor: ->
    return undefined
f = ( a, b ) -> a * b


pattern = /foo/
pattern = /foo/u
pattern = ///foo///
pattern = ///foo///u

#-----------------------------------------------------------------------------------------------------------
debug"""select 'helo from sql' as greeting;

create function f() returns text language plpgsql as $$
  declare
    r text := '';
  begin
    return r;
    end;
  $$;
"""

#-----------------------------------------------------------------------------------------------------------
pgsql"""select 'helo from sql' as greeting;

create function f() returns text language plpgsql as $$
  declare
    r text := '';
  begin
    return r;
    end;
  $$;
"""


#-----------------------------------------------------------------------------------------------------------
sql"""select 'helo from sql' as greeting;"""
Sql"""select 'helo from sql' as greeting;"""
SQL"""select 'helo from sql' as greeting;"""
sql"select 'helo from sql' as greeting;"
Sql"select 'helo from sql' as greeting;"
SQL"select 'helo from sql' as greeting;"
#...........................................................................................................
pgsql"""select 'helo from sql' as greeting;"""
PGSQL"""select 'helo from sql' as greeting;"""
pgsql"select 'helo from sql' as greeting;"
PGSQL"select 'helo from sql' as greeting;"
#...........................................................................................................
plpgsql"""select 'helo from sql' as greeting;"""
PLpgsql"""select 'helo from sql' as greeting;"""
PLPGSQL"""select 'helo from sql' as greeting;"""
plpgSQL"""select 'helo from sql' as greeting;"""
plpgsql"select 'helo from sql' as greeting;"
PLpgsql"select 'helo from sql' as greeting;"
PLPGSQL"select 'helo from sql' as greeting;"
plpgSQL"select 'helo from sql' as greeting;"
#-----------------------------------------------------------------------------------------------------------
sql"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
Sql"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
SQL"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
sql"select 'helo from #{if true then 'sql' else 42}' as greeting;"
Sql"select 'helo from #{if true then 'sql' else 42}' as greeting;"
SQL"select 'helo from #{if true then 'sql' else 42}' as greeting;"
#...........................................................................................................
pgsql"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
PGSQL"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
pgsql"select 'helo from #{if true then 'sql' else 42}' as greeting;"
PGSQL"select 'helo from #{if true then 'sql' else 42}' as greeting;"
#...........................................................................................................
plpgsql"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
PLpgsql"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
PLPGSQL"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
plpgSQL"""select 'helo from #{if true then 'sql' else 42}' as greeting;"""
plpgsql"select 'helo from #{if true then 'sql' else 42}' as greeting;"
PLpgsql"select 'helo from #{if true then 'sql' else 42}' as greeting;"
PLPGSQL"select 'helo from #{if true then 'sql' else 42}' as greeting;"
plpgSQL"select 'helo from #{if true then 'sql' else 42}' as greeting;"

if true then 'sql' else 42
#{if true then 'sql' else 42}
`if (#{if true then 'sql' else 42}) { return function f() {}; }`


select 'helo from sql' as greeting;

plpgsql"""select 'helo from sql' as greeting;

create function f() returns text language plpgsql as $$
  declare
    r text := '';
  begin
    return r;
    end;
  $$;
"""

create function f() returns text language plpgsql as $$
  declare
    r text := '';
  begin
    return r;
    end;
  $$;


#-----------------------------------------------------------------------------------------------------------
select 'helo from sql' as greeting;
sql"""select 'helo from sql' as greeting;"""
"""select 'helo from sql' as greeting;"""


#-----------------------------------------------------------------------------------------------------------
d = "some coffeescript #{class X extends Foo} embedded in string on same line"

#-----------------------------------------------------------------------------------------------------------
```log( `helo from JS` )```;
```
const javascript = true;
log( `helo from JS` );
select 'helo from sql' as greeting;
```

f = `x && y`


f = ->
  `const x = 10`
  `const y = (function() { return 10; } )()`
  return null

f = ( field_name ) ->
  return sql"""select 42 as <var i=field_name>"""

# <script>
#   console.log( `helo` );
#   const d = class X extends Array {};
# </script>
#
